import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt
import numpy as np

# Load the cleaned dataset
file_path = 'cleaned_drug_demand_data.csv'  # Update with your file path
df_cleaned = pd.read_csv(file_path)

# Ensure the data has a proper time column
df_cleaned['Date'] = pd.date_range(start='2020-01-01', periods=len(df_cleaned), freq='D')
df_cleaned.set_index('Date', inplace=True)

# Prepare the time series data
df_time_series = df_cleaned[['Demand']].copy()

# Split data into training and test sets (80-20 split)
train_size = int(len(df_time_series) * 0.8)
train, test = df_time_series[:train_size], df_time_series[train_size:]

# Fit SARIMA model for time series
model_sarima = SARIMAX(
    train['Demand'], 
    order=(1, 1, 1),  # ARIMA(p, d, q)
    seasonal_order=(1, 1, 1, 12)  # SARIMA(P, D, Q, s), assuming monthly seasonality
)
model_sarima_fit = model_sarima.fit(disp=False)

# Forecast for test set
forecast_test = model_sarima_fit.forecast(steps=len(test))

# Forecast future (e.g., next 30 days)
forecast_future_steps = 30
forecast_future = model_sarima_fit.forecast(steps=forecast_future_steps)

# Evaluation Metrics for Test Data
rmse = np.sqrt(mean_squared_error(test['Demand'], forecast_test))
mae = mean_absolute_error(test['Demand'], forecast_test)
r2 = r2_score(test['Demand'], forecast_test)

print("Model Performance on Test Data:")
print(f"RMSE: {rmse:.2f}")
print(f"MAE: {mae:.2f}")
print(f"R^2: {r2:.2f}")

# Plot the results
plt.figure(figsize=(12, 6))
plt.plot(train['Demand'], label='Training Data', color='blue')
plt.plot(test['Demand'], label='Test Data', color='green')
plt.plot(test.index, forecast_test, label='Test Forecast', linestyle='--', color='orange')
plt.title('SARIMA - Test Forecasting')
plt.xlabel('Date')
plt.ylabel('Demand')
plt.legend()
plt.show()

# Plot future forecast
forecast_future_dates = pd.date_range(start=df_cleaned.index[-1], periods=forecast_future_steps + 1, freq='D')[1:]
plt.figure(figsize=(12, 6))
plt.plot(df_time_series['Demand'], label='Actual Data', color='blue')
plt.plot(forecast_future_dates, forecast_future, label='Future Forecast (Next 30 Days)', linestyle='--', color='red')
plt.title('SARIMA - Future Forecasting')
plt.xlabel('Date')
plt.ylabel('Demand')
plt.legend()
plt.show()

# Save the SARIMA model
import joblib
joblib.dump(model_sarima_fit, 'sarima_model.pkl')
print("SARIMA model saved as 'sarima_model.pkl'")
