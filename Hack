DATA CLEANING -

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder

# Load the dataset
data_path = 'drug_demand_forecasting.xlsx'  # Path to the dataset
data = pd.read_excel(data_path)

# Step 1: Data Cleaning
# Handling missing values
data['Demand'].fillna(data['Demand'].median(), inplace=True)  # Replace NaN with median
data['Prescription_Volume'].fillna(data['Prescription_Volume'].median(), inplace=True)
data['Region'].fillna(data['Region'].mode()[0], inplace=True)

# Drop rows with excessive missing data
data.dropna(subset=['Event', 'Market_News', 'Press_Release'], inplace=True)

# Step 2: Encoding categorical variables
le = LabelEncoder()
data['Region'] = le.fit_transform(data['Region'])
data['Drug'] = le.fit_transform(data['Drug'])
data['Category'] = le.fit_transform(data['Category'])
data['Drug_Type'] = le.fit_transform(data['Drug_Type'])

# Step 3: Feature Engineering
# Creating time-based features
data['Date'] = pd.to_datetime(data['Date'])
data['Year'] = data['Date'].dt.year
data['Month'] = data['Date'].dt.month
data['Weekday'] = data['Date'].dt.weekday

# Lag features for time-series modeling
data['Demand_Lag_1'] = data['Demand'].shift(1)
data['Demand_Lag_7'] = data['Demand'].shift(7)  # Weekly lag

# Rolling features for smoothing
data['Demand_Rolling_Mean_7'] = data['Demand'].rolling(window=7).mean()

# Drop rows with NaN values introduced by lagging
data.dropna(inplace=True)

# Step 4: Save the cleaned data
cleaned_data_path = 'cleaned_drug_demand_data.csv'
data.to_csv(cleaned_data_path, index=False)

print(f"Data cleaning completed. Cleaned data saved to {cleaned_data_path}.")


---[# Steps;

1. Cleaning data - provide code for this
2. appropriate algorithm for problem statement
3. code for demand optimum inventory according to data set given provide code
4. use NLP for Preprocess textual and check the influence factors for drug demand

do data modelling having all three feature in jupyter notebook so that ir can further use fin fast api and streamlit] write this promt





ye dekha rha h error correct krke bhejo code



[TypeError                                 Traceback (most recent call last)
Cell In[1], line 11
      7 data = pd.read_excel(data_path)
      9 # Data Cleaning, dealing with meissing values 
---> 11 data['Demand'].fillna(data['Demand'].median(), inplace=True)  # Replace NaN with median
     12 data['Prescription_Volume'].fillna(data['Prescription_Volume'].median(), inplace=True)
     13 data['Region'].fillna(data['Region'].mode()[0], inplace=True)

File /opt/anaconda3/lib/python3.12/site-packages/pandas/core/series.py:6559, in Series.median(self, axis, skipna, numeric_only, **kwargs)
   6551 @doc(make_doc("median", ndim=1))
   6552 def median(
   6553     self,
   (...)
   6557     **kwargs,
   6558 ):
-> 6559     return NDFrame.median(self, axis, skipna, numeric_only, **kwargs)

File /opt/anaconda3/lib/python3.12/site-packages/pandas/core/generic.py:12431, in NDFrame.median(self, axis, skipna, numeric_only, **kwargs)
  12424 def median(
  12425     self,
  12426     axis: Axis | None = 0,
   (...)
  12429     **kwargs,
  12430 ) -> Series | float:
> 12431     return self._stat_function(
  12432         "median", nanops.nanmedian, axis, skipna, numeric_only, **kwargs
  12433     )

File /opt/anaconda3/lib/python3.12/site-packages/pandas/core/generic.py:12377, in NDFrame._stat_function(self, name, func, axis, skipna, numeric_only, **kwargs)
  12373 nv.validate_func(name, (), kwargs)
  12375 validate_bool_kwarg(skipna, "skipna", none_allowed=False)
> 12377 return self._reduce(
  12378     func, name=name, axis=axis, skipna=skipna, numeric_only=numeric_only
  12379 )

File /opt/anaconda3/lib/python3.12/site-packages/pandas/core/series.py:6457, in Series._reduce(self, op, name, axis, skipna, numeric_only, filter_type, **kwds)
   6452     # GH#47500 - change to TypeError to match other methods
   6453     raise TypeError(
   6454         f"Series.{name} does not allow {kwd_name}={numeric_only} "
   6455         "with non-numeric dtypes."
   6456     )
-> 6457 return op(delegate, skipna=skipna, **kwds)

File /opt/anaconda3/lib/python3.12/site-packages/pandas/core/nanops.py:147, in bottleneck_switch.__call__.<locals>.f(values, axis, skipna, **kwds)
    145         result = alt(values, axis=axis, skipna=skipna, **kwds)
    146 else:
--> 147     result = alt(values, axis=axis, skipna=skipna, **kwds)
    149 return result

File /opt/anaconda3/lib/python3.12/site-packages/pandas/core/nanops.py:787, in nanmedian(values, axis, skipna, mask)
    785     inferred = lib.infer_dtype(values)
    786     if inferred in ["string", "mixed"]:
--> 787         raise TypeError(f"Cannot convert {values} to numeric")
    788 try:
    789     values = values.astype("f8")

TypeError: Cannot convert [129.9397281760626 108.8388129913881 78.75299500948833 ...
 77.57111421052167 49.24825094019967 79.0526862589349] to numeric]-----showing this error correct this and clean everuthing and give again
